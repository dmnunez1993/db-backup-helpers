#!/usr/bin/env python3
import getpass
import subprocess
import os


DB_BACKUPS_VOLUME_NAME = 'db_backups_dev_volume'


def run_command(command, hide_std=False):
    if hide_std:
        with open(os.devnull, 'w') as DEVNULL:
            return subprocess.call(command, shell=True, stdout=DEVNULL, stderr=DEVNULL)
    return subprocess.call(command, shell=True)


def get_repo_root():
    return subprocess.check_output(
        'git rev-parse --show-toplevel'.split(),
        encoding='utf-8').strip()


def check_volume_exists(volume_name):
    command = "docker volume inspect {}".format(volume_name)
    ret = run_command(command, True) == 0
    return ret


def run_dev_environment():
    user = getpass.getuser()
    uid = os.getuid()
    docker_args = []
    
    if not check_volume_exists(DB_BACKUPS_VOLUME_NAME):
        print("Creating backups volume...")
        run_command("docker volume create {}".format(DB_BACKUPS_VOLUME_NAME), True)


    home_folder = os.path.expanduser("~")
    docker_args.append("-it")
    docker_args.append("--rm")
    docker_args.append("--name=\"db_backups_dev_env\"")
    docker_args.append("-p 8080:8080")
    docker_args.append("--user {}:{}".format(uid, uid))
    docker_args.append("-e USER={}".format(user))
    docker_args.append("--volume {}/.db_backups_dev_env/user/:/home/{}/".format(home_folder, user))
    docker_args.append("--volume {}/.ssh/:/home/{}/.ssh/".format(home_folder, user))
    docker_args.append("--volume {}/.gitconfig:/home/{}/.gitconfig".format(home_folder, user))
    docker_args.append("--volume {}:/db_backups/".format(get_repo_root()))
    docker_args.append("--volume {}:/backups_folder/".format(DB_BACKUPS_VOLUME_NAME))
    docker_args.append("--name db_backups_dev_env")
    docker_args.append("--hostname db_backups_dev_env")
    docker_args.append("--workdir /db_backups/")

    docker_args = ' '.join(docker_args)
    docker_command = "docker run {} db_backups_dev_env setup_env".format(docker_args)

    run_command("mkdir -p {}/.db_backups_dev_env/user/".format(home_folder))
    run_command(docker_command)


def attach_dev_environment():
    uid = os.getuid()
    command = 'docker exec -it --user {}:{} db_backups_dev_env attach_env'
    run_command(command.format(uid, uid))


def is_running():
    command = 'docker ps | grep db_backups_dev_env > /dev/null'
    try:
        subprocess.check_call(command, shell=True)
    except Exception:
        return False

    return True


def main():
    if not is_running():
        run_dev_environment()
    else:
        attach_dev_environment()

if __name__ == '__main__':
    main()
